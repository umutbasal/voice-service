# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import voice_pb2 as voice__pb2


class TextToSpeechServiceStub(object):
    """Text-to-Speech Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConvertTextToSpeech = channel.unary_unary(
                '/voice.TextToSpeechService/ConvertTextToSpeech',
                request_serializer=voice__pb2.TextToSpeechRequest.SerializeToString,
                response_deserializer=voice__pb2.TextToSpeechResponse.FromString,
                )
        self.StreamTextToSpeech = channel.unary_stream(
                '/voice.TextToSpeechService/StreamTextToSpeech',
                request_serializer=voice__pb2.TextToSpeechRequest.SerializeToString,
                response_deserializer=voice__pb2.AudioChunk.FromString,
                )
        self.StreamTextToSpeechRequest = channel.stream_unary(
                '/voice.TextToSpeechService/StreamTextToSpeechRequest',
                request_serializer=voice__pb2.TextChunk.SerializeToString,
                response_deserializer=voice__pb2.TextToSpeechResponse.FromString,
                )
        self.StreamTextToSpeechBidirectional = channel.stream_stream(
                '/voice.TextToSpeechService/StreamTextToSpeechBidirectional',
                request_serializer=voice__pb2.TextChunk.SerializeToString,
                response_deserializer=voice__pb2.AudioChunk.FromString,
                )


class TextToSpeechServiceServicer(object):
    """Text-to-Speech Service
    """

    def ConvertTextToSpeech(self, request, context):
        """Simple: Text in, Audio out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTextToSpeech(self, request, context):
        """Stream response: Long text in, stream of audio chunks out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTextToSpeechRequest(self, request_iterator, context):
        """Stream request: Stream of text chunks in, complete audio out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTextToSpeechBidirectional(self, request_iterator, context):
        """Bidirectional: Stream of text chunks in, stream of audio chunks out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextToSpeechServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConvertTextToSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertTextToSpeech,
                    request_deserializer=voice__pb2.TextToSpeechRequest.FromString,
                    response_serializer=voice__pb2.TextToSpeechResponse.SerializeToString,
            ),
            'StreamTextToSpeech': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTextToSpeech,
                    request_deserializer=voice__pb2.TextToSpeechRequest.FromString,
                    response_serializer=voice__pb2.AudioChunk.SerializeToString,
            ),
            'StreamTextToSpeechRequest': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamTextToSpeechRequest,
                    request_deserializer=voice__pb2.TextChunk.FromString,
                    response_serializer=voice__pb2.TextToSpeechResponse.SerializeToString,
            ),
            'StreamTextToSpeechBidirectional': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamTextToSpeechBidirectional,
                    request_deserializer=voice__pb2.TextChunk.FromString,
                    response_serializer=voice__pb2.AudioChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'voice.TextToSpeechService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextToSpeechService(object):
    """Text-to-Speech Service
    """

    @staticmethod
    def ConvertTextToSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/voice.TextToSpeechService/ConvertTextToSpeech',
            voice__pb2.TextToSpeechRequest.SerializeToString,
            voice__pb2.TextToSpeechResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTextToSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/voice.TextToSpeechService/StreamTextToSpeech',
            voice__pb2.TextToSpeechRequest.SerializeToString,
            voice__pb2.AudioChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTextToSpeechRequest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/voice.TextToSpeechService/StreamTextToSpeechRequest',
            voice__pb2.TextChunk.SerializeToString,
            voice__pb2.TextToSpeechResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTextToSpeechBidirectional(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/voice.TextToSpeechService/StreamTextToSpeechBidirectional',
            voice__pb2.TextChunk.SerializeToString,
            voice__pb2.AudioChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SpeechToTextServiceStub(object):
    """Speech-to-Text Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConvertSpeechToText = channel.unary_unary(
                '/voice.SpeechToTextService/ConvertSpeechToText',
                request_serializer=voice__pb2.SpeechToTextRequest.SerializeToString,
                response_deserializer=voice__pb2.SpeechToTextResponse.FromString,
                )
        self.StreamSpeechToText = channel.unary_stream(
                '/voice.SpeechToTextService/StreamSpeechToText',
                request_serializer=voice__pb2.SpeechToTextRequest.SerializeToString,
                response_deserializer=voice__pb2.TranscriptionChunk.FromString,
                )
        self.StreamSpeechToTextRequest = channel.stream_unary(
                '/voice.SpeechToTextService/StreamSpeechToTextRequest',
                request_serializer=voice__pb2.AudioChunk.SerializeToString,
                response_deserializer=voice__pb2.SpeechToTextResponse.FromString,
                )
        self.StreamSpeechToTextBidirectional = channel.stream_stream(
                '/voice.SpeechToTextService/StreamSpeechToTextBidirectional',
                request_serializer=voice__pb2.AudioChunk.SerializeToString,
                response_deserializer=voice__pb2.TranscriptionChunk.FromString,
                )


class SpeechToTextServiceServicer(object):
    """Speech-to-Text Service
    """

    def ConvertSpeechToText(self, request, context):
        """Simple: Audio in, Text out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSpeechToText(self, request, context):
        """Stream response: Complete audio in, stream of text chunks out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSpeechToTextRequest(self, request_iterator, context):
        """Stream request: Stream of audio chunks in, complete text out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSpeechToTextBidirectional(self, request_iterator, context):
        """Bidirectional: Stream of audio chunks in, stream of text chunks out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpeechToTextServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConvertSpeechToText': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertSpeechToText,
                    request_deserializer=voice__pb2.SpeechToTextRequest.FromString,
                    response_serializer=voice__pb2.SpeechToTextResponse.SerializeToString,
            ),
            'StreamSpeechToText': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamSpeechToText,
                    request_deserializer=voice__pb2.SpeechToTextRequest.FromString,
                    response_serializer=voice__pb2.TranscriptionChunk.SerializeToString,
            ),
            'StreamSpeechToTextRequest': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamSpeechToTextRequest,
                    request_deserializer=voice__pb2.AudioChunk.FromString,
                    response_serializer=voice__pb2.SpeechToTextResponse.SerializeToString,
            ),
            'StreamSpeechToTextBidirectional': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamSpeechToTextBidirectional,
                    request_deserializer=voice__pb2.AudioChunk.FromString,
                    response_serializer=voice__pb2.TranscriptionChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'voice.SpeechToTextService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpeechToTextService(object):
    """Speech-to-Text Service
    """

    @staticmethod
    def ConvertSpeechToText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/voice.SpeechToTextService/ConvertSpeechToText',
            voice__pb2.SpeechToTextRequest.SerializeToString,
            voice__pb2.SpeechToTextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSpeechToText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/voice.SpeechToTextService/StreamSpeechToText',
            voice__pb2.SpeechToTextRequest.SerializeToString,
            voice__pb2.TranscriptionChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSpeechToTextRequest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/voice.SpeechToTextService/StreamSpeechToTextRequest',
            voice__pb2.AudioChunk.SerializeToString,
            voice__pb2.SpeechToTextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSpeechToTextBidirectional(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/voice.SpeechToTextService/StreamSpeechToTextBidirectional',
            voice__pb2.AudioChunk.SerializeToString,
            voice__pb2.TranscriptionChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
