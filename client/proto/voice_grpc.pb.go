// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: voice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextToSpeechServiceClient is the client API for TextToSpeechService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextToSpeechServiceClient interface {
	// Unary: Text in, Audio out
	UnaryConvertTextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (*TextToSpeechResponse, error)
	// Server streaming: Long text in, stream of audio chunks out
	ServerStreamTextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (TextToSpeechService_ServerStreamTextToSpeechClient, error)
	// Client streaming: Stream of text chunks in, complete audio out
	ClientStreamTextToSpeech(ctx context.Context, opts ...grpc.CallOption) (TextToSpeechService_ClientStreamTextToSpeechClient, error)
	// Bidirectional streaming: Stream of text chunks in, stream of audio chunks out
	BidirectionalStreamTextToSpeech(ctx context.Context, opts ...grpc.CallOption) (TextToSpeechService_BidirectionalStreamTextToSpeechClient, error)
}

type textToSpeechServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextToSpeechServiceClient(cc grpc.ClientConnInterface) TextToSpeechServiceClient {
	return &textToSpeechServiceClient{cc}
}

func (c *textToSpeechServiceClient) UnaryConvertTextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (*TextToSpeechResponse, error) {
	out := new(TextToSpeechResponse)
	err := c.cc.Invoke(ctx, "/voice.TextToSpeechService/UnaryConvertTextToSpeech", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textToSpeechServiceClient) ServerStreamTextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (TextToSpeechService_ServerStreamTextToSpeechClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextToSpeechService_ServiceDesc.Streams[0], "/voice.TextToSpeechService/ServerStreamTextToSpeech", opts...)
	if err != nil {
		return nil, err
	}
	x := &textToSpeechServiceServerStreamTextToSpeechClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextToSpeechService_ServerStreamTextToSpeechClient interface {
	Recv() (*AudioChunk, error)
	grpc.ClientStream
}

type textToSpeechServiceServerStreamTextToSpeechClient struct {
	grpc.ClientStream
}

func (x *textToSpeechServiceServerStreamTextToSpeechClient) Recv() (*AudioChunk, error) {
	m := new(AudioChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textToSpeechServiceClient) ClientStreamTextToSpeech(ctx context.Context, opts ...grpc.CallOption) (TextToSpeechService_ClientStreamTextToSpeechClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextToSpeechService_ServiceDesc.Streams[1], "/voice.TextToSpeechService/ClientStreamTextToSpeech", opts...)
	if err != nil {
		return nil, err
	}
	x := &textToSpeechServiceClientStreamTextToSpeechClient{stream}
	return x, nil
}

type TextToSpeechService_ClientStreamTextToSpeechClient interface {
	Send(*TextChunk) error
	CloseAndRecv() (*TextToSpeechResponse, error)
	grpc.ClientStream
}

type textToSpeechServiceClientStreamTextToSpeechClient struct {
	grpc.ClientStream
}

func (x *textToSpeechServiceClientStreamTextToSpeechClient) Send(m *TextChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textToSpeechServiceClientStreamTextToSpeechClient) CloseAndRecv() (*TextToSpeechResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TextToSpeechResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textToSpeechServiceClient) BidirectionalStreamTextToSpeech(ctx context.Context, opts ...grpc.CallOption) (TextToSpeechService_BidirectionalStreamTextToSpeechClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextToSpeechService_ServiceDesc.Streams[2], "/voice.TextToSpeechService/BidirectionalStreamTextToSpeech", opts...)
	if err != nil {
		return nil, err
	}
	x := &textToSpeechServiceBidirectionalStreamTextToSpeechClient{stream}
	return x, nil
}

type TextToSpeechService_BidirectionalStreamTextToSpeechClient interface {
	Send(*TextChunk) error
	Recv() (*AudioChunk, error)
	grpc.ClientStream
}

type textToSpeechServiceBidirectionalStreamTextToSpeechClient struct {
	grpc.ClientStream
}

func (x *textToSpeechServiceBidirectionalStreamTextToSpeechClient) Send(m *TextChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textToSpeechServiceBidirectionalStreamTextToSpeechClient) Recv() (*AudioChunk, error) {
	m := new(AudioChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextToSpeechServiceServer is the server API for TextToSpeechService service.
// All implementations must embed UnimplementedTextToSpeechServiceServer
// for forward compatibility
type TextToSpeechServiceServer interface {
	// Unary: Text in, Audio out
	UnaryConvertTextToSpeech(context.Context, *TextToSpeechRequest) (*TextToSpeechResponse, error)
	// Server streaming: Long text in, stream of audio chunks out
	ServerStreamTextToSpeech(*TextToSpeechRequest, TextToSpeechService_ServerStreamTextToSpeechServer) error
	// Client streaming: Stream of text chunks in, complete audio out
	ClientStreamTextToSpeech(TextToSpeechService_ClientStreamTextToSpeechServer) error
	// Bidirectional streaming: Stream of text chunks in, stream of audio chunks out
	BidirectionalStreamTextToSpeech(TextToSpeechService_BidirectionalStreamTextToSpeechServer) error
	mustEmbedUnimplementedTextToSpeechServiceServer()
}

// UnimplementedTextToSpeechServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextToSpeechServiceServer struct {
}

func (UnimplementedTextToSpeechServiceServer) UnaryConvertTextToSpeech(context.Context, *TextToSpeechRequest) (*TextToSpeechResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryConvertTextToSpeech not implemented")
}
func (UnimplementedTextToSpeechServiceServer) ServerStreamTextToSpeech(*TextToSpeechRequest, TextToSpeechService_ServerStreamTextToSpeechServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamTextToSpeech not implemented")
}
func (UnimplementedTextToSpeechServiceServer) ClientStreamTextToSpeech(TextToSpeechService_ClientStreamTextToSpeechServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamTextToSpeech not implemented")
}
func (UnimplementedTextToSpeechServiceServer) BidirectionalStreamTextToSpeech(TextToSpeechService_BidirectionalStreamTextToSpeechServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamTextToSpeech not implemented")
}
func (UnimplementedTextToSpeechServiceServer) mustEmbedUnimplementedTextToSpeechServiceServer() {}

// UnsafeTextToSpeechServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextToSpeechServiceServer will
// result in compilation errors.
type UnsafeTextToSpeechServiceServer interface {
	mustEmbedUnimplementedTextToSpeechServiceServer()
}

func RegisterTextToSpeechServiceServer(s grpc.ServiceRegistrar, srv TextToSpeechServiceServer) {
	s.RegisterService(&TextToSpeechService_ServiceDesc, srv)
}

func _TextToSpeechService_UnaryConvertTextToSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextToSpeechRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextToSpeechServiceServer).UnaryConvertTextToSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voice.TextToSpeechService/UnaryConvertTextToSpeech",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextToSpeechServiceServer).UnaryConvertTextToSpeech(ctx, req.(*TextToSpeechRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextToSpeechService_ServerStreamTextToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TextToSpeechRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextToSpeechServiceServer).ServerStreamTextToSpeech(m, &textToSpeechServiceServerStreamTextToSpeechServer{stream})
}

type TextToSpeechService_ServerStreamTextToSpeechServer interface {
	Send(*AudioChunk) error
	grpc.ServerStream
}

type textToSpeechServiceServerStreamTextToSpeechServer struct {
	grpc.ServerStream
}

func (x *textToSpeechServiceServerStreamTextToSpeechServer) Send(m *AudioChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _TextToSpeechService_ClientStreamTextToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextToSpeechServiceServer).ClientStreamTextToSpeech(&textToSpeechServiceClientStreamTextToSpeechServer{stream})
}

type TextToSpeechService_ClientStreamTextToSpeechServer interface {
	SendAndClose(*TextToSpeechResponse) error
	Recv() (*TextChunk, error)
	grpc.ServerStream
}

type textToSpeechServiceClientStreamTextToSpeechServer struct {
	grpc.ServerStream
}

func (x *textToSpeechServiceClientStreamTextToSpeechServer) SendAndClose(m *TextToSpeechResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textToSpeechServiceClientStreamTextToSpeechServer) Recv() (*TextChunk, error) {
	m := new(TextChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TextToSpeechService_BidirectionalStreamTextToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextToSpeechServiceServer).BidirectionalStreamTextToSpeech(&textToSpeechServiceBidirectionalStreamTextToSpeechServer{stream})
}

type TextToSpeechService_BidirectionalStreamTextToSpeechServer interface {
	Send(*AudioChunk) error
	Recv() (*TextChunk, error)
	grpc.ServerStream
}

type textToSpeechServiceBidirectionalStreamTextToSpeechServer struct {
	grpc.ServerStream
}

func (x *textToSpeechServiceBidirectionalStreamTextToSpeechServer) Send(m *AudioChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textToSpeechServiceBidirectionalStreamTextToSpeechServer) Recv() (*TextChunk, error) {
	m := new(TextChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextToSpeechService_ServiceDesc is the grpc.ServiceDesc for TextToSpeechService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextToSpeechService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice.TextToSpeechService",
	HandlerType: (*TextToSpeechServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryConvertTextToSpeech",
			Handler:    _TextToSpeechService_UnaryConvertTextToSpeech_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamTextToSpeech",
			Handler:       _TextToSpeechService_ServerStreamTextToSpeech_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamTextToSpeech",
			Handler:       _TextToSpeechService_ClientStreamTextToSpeech_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamTextToSpeech",
			Handler:       _TextToSpeechService_BidirectionalStreamTextToSpeech_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "voice.proto",
}

// SpeechToTextServiceClient is the client API for SpeechToTextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechToTextServiceClient interface {
	// Unary: Audio in, Text out
	UnaryConvertSpeechToText(ctx context.Context, in *SpeechToTextRequest, opts ...grpc.CallOption) (*SpeechToTextResponse, error)
	// Server streaming: Complete audio in, stream of text chunks out
	ServerStreamSpeechToText(ctx context.Context, in *SpeechToTextRequest, opts ...grpc.CallOption) (SpeechToTextService_ServerStreamSpeechToTextClient, error)
	// Client streaming: Stream of audio chunks in, complete text out
	ClientStreamSpeechToText(ctx context.Context, opts ...grpc.CallOption) (SpeechToTextService_ClientStreamSpeechToTextClient, error)
	// Bidirectional streaming: Stream of audio chunks in, stream of text chunks out
	BidirectionalStreamSpeechToText(ctx context.Context, opts ...grpc.CallOption) (SpeechToTextService_BidirectionalStreamSpeechToTextClient, error)
}

type speechToTextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechToTextServiceClient(cc grpc.ClientConnInterface) SpeechToTextServiceClient {
	return &speechToTextServiceClient{cc}
}

func (c *speechToTextServiceClient) UnaryConvertSpeechToText(ctx context.Context, in *SpeechToTextRequest, opts ...grpc.CallOption) (*SpeechToTextResponse, error) {
	out := new(SpeechToTextResponse)
	err := c.cc.Invoke(ctx, "/voice.SpeechToTextService/UnaryConvertSpeechToText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechToTextServiceClient) ServerStreamSpeechToText(ctx context.Context, in *SpeechToTextRequest, opts ...grpc.CallOption) (SpeechToTextService_ServerStreamSpeechToTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpeechToTextService_ServiceDesc.Streams[0], "/voice.SpeechToTextService/ServerStreamSpeechToText", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextServiceServerStreamSpeechToTextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpeechToTextService_ServerStreamSpeechToTextClient interface {
	Recv() (*TranscriptionChunk, error)
	grpc.ClientStream
}

type speechToTextServiceServerStreamSpeechToTextClient struct {
	grpc.ClientStream
}

func (x *speechToTextServiceServerStreamSpeechToTextClient) Recv() (*TranscriptionChunk, error) {
	m := new(TranscriptionChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *speechToTextServiceClient) ClientStreamSpeechToText(ctx context.Context, opts ...grpc.CallOption) (SpeechToTextService_ClientStreamSpeechToTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpeechToTextService_ServiceDesc.Streams[1], "/voice.SpeechToTextService/ClientStreamSpeechToText", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextServiceClientStreamSpeechToTextClient{stream}
	return x, nil
}

type SpeechToTextService_ClientStreamSpeechToTextClient interface {
	Send(*AudioChunk) error
	CloseAndRecv() (*SpeechToTextResponse, error)
	grpc.ClientStream
}

type speechToTextServiceClientStreamSpeechToTextClient struct {
	grpc.ClientStream
}

func (x *speechToTextServiceClientStreamSpeechToTextClient) Send(m *AudioChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechToTextServiceClientStreamSpeechToTextClient) CloseAndRecv() (*SpeechToTextResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SpeechToTextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *speechToTextServiceClient) BidirectionalStreamSpeechToText(ctx context.Context, opts ...grpc.CallOption) (SpeechToTextService_BidirectionalStreamSpeechToTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpeechToTextService_ServiceDesc.Streams[2], "/voice.SpeechToTextService/BidirectionalStreamSpeechToText", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextServiceBidirectionalStreamSpeechToTextClient{stream}
	return x, nil
}

type SpeechToTextService_BidirectionalStreamSpeechToTextClient interface {
	Send(*AudioChunk) error
	Recv() (*TranscriptionChunk, error)
	grpc.ClientStream
}

type speechToTextServiceBidirectionalStreamSpeechToTextClient struct {
	grpc.ClientStream
}

func (x *speechToTextServiceBidirectionalStreamSpeechToTextClient) Send(m *AudioChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechToTextServiceBidirectionalStreamSpeechToTextClient) Recv() (*TranscriptionChunk, error) {
	m := new(TranscriptionChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechToTextServiceServer is the server API for SpeechToTextService service.
// All implementations must embed UnimplementedSpeechToTextServiceServer
// for forward compatibility
type SpeechToTextServiceServer interface {
	// Unary: Audio in, Text out
	UnaryConvertSpeechToText(context.Context, *SpeechToTextRequest) (*SpeechToTextResponse, error)
	// Server streaming: Complete audio in, stream of text chunks out
	ServerStreamSpeechToText(*SpeechToTextRequest, SpeechToTextService_ServerStreamSpeechToTextServer) error
	// Client streaming: Stream of audio chunks in, complete text out
	ClientStreamSpeechToText(SpeechToTextService_ClientStreamSpeechToTextServer) error
	// Bidirectional streaming: Stream of audio chunks in, stream of text chunks out
	BidirectionalStreamSpeechToText(SpeechToTextService_BidirectionalStreamSpeechToTextServer) error
	mustEmbedUnimplementedSpeechToTextServiceServer()
}

// UnimplementedSpeechToTextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechToTextServiceServer struct {
}

func (UnimplementedSpeechToTextServiceServer) UnaryConvertSpeechToText(context.Context, *SpeechToTextRequest) (*SpeechToTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryConvertSpeechToText not implemented")
}
func (UnimplementedSpeechToTextServiceServer) ServerStreamSpeechToText(*SpeechToTextRequest, SpeechToTextService_ServerStreamSpeechToTextServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamSpeechToText not implemented")
}
func (UnimplementedSpeechToTextServiceServer) ClientStreamSpeechToText(SpeechToTextService_ClientStreamSpeechToTextServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamSpeechToText not implemented")
}
func (UnimplementedSpeechToTextServiceServer) BidirectionalStreamSpeechToText(SpeechToTextService_BidirectionalStreamSpeechToTextServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamSpeechToText not implemented")
}
func (UnimplementedSpeechToTextServiceServer) mustEmbedUnimplementedSpeechToTextServiceServer() {}

// UnsafeSpeechToTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechToTextServiceServer will
// result in compilation errors.
type UnsafeSpeechToTextServiceServer interface {
	mustEmbedUnimplementedSpeechToTextServiceServer()
}

func RegisterSpeechToTextServiceServer(s grpc.ServiceRegistrar, srv SpeechToTextServiceServer) {
	s.RegisterService(&SpeechToTextService_ServiceDesc, srv)
}

func _SpeechToTextService_UnaryConvertSpeechToText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeechToTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechToTextServiceServer).UnaryConvertSpeechToText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voice.SpeechToTextService/UnaryConvertSpeechToText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechToTextServiceServer).UnaryConvertSpeechToText(ctx, req.(*SpeechToTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechToTextService_ServerStreamSpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SpeechToTextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpeechToTextServiceServer).ServerStreamSpeechToText(m, &speechToTextServiceServerStreamSpeechToTextServer{stream})
}

type SpeechToTextService_ServerStreamSpeechToTextServer interface {
	Send(*TranscriptionChunk) error
	grpc.ServerStream
}

type speechToTextServiceServerStreamSpeechToTextServer struct {
	grpc.ServerStream
}

func (x *speechToTextServiceServerStreamSpeechToTextServer) Send(m *TranscriptionChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _SpeechToTextService_ClientStreamSpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechToTextServiceServer).ClientStreamSpeechToText(&speechToTextServiceClientStreamSpeechToTextServer{stream})
}

type SpeechToTextService_ClientStreamSpeechToTextServer interface {
	SendAndClose(*SpeechToTextResponse) error
	Recv() (*AudioChunk, error)
	grpc.ServerStream
}

type speechToTextServiceClientStreamSpeechToTextServer struct {
	grpc.ServerStream
}

func (x *speechToTextServiceClientStreamSpeechToTextServer) SendAndClose(m *SpeechToTextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechToTextServiceClientStreamSpeechToTextServer) Recv() (*AudioChunk, error) {
	m := new(AudioChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SpeechToTextService_BidirectionalStreamSpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechToTextServiceServer).BidirectionalStreamSpeechToText(&speechToTextServiceBidirectionalStreamSpeechToTextServer{stream})
}

type SpeechToTextService_BidirectionalStreamSpeechToTextServer interface {
	Send(*TranscriptionChunk) error
	Recv() (*AudioChunk, error)
	grpc.ServerStream
}

type speechToTextServiceBidirectionalStreamSpeechToTextServer struct {
	grpc.ServerStream
}

func (x *speechToTextServiceBidirectionalStreamSpeechToTextServer) Send(m *TranscriptionChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechToTextServiceBidirectionalStreamSpeechToTextServer) Recv() (*AudioChunk, error) {
	m := new(AudioChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechToTextService_ServiceDesc is the grpc.ServiceDesc for SpeechToTextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeechToTextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice.SpeechToTextService",
	HandlerType: (*SpeechToTextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryConvertSpeechToText",
			Handler:    _SpeechToTextService_UnaryConvertSpeechToText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamSpeechToText",
			Handler:       _SpeechToTextService_ServerStreamSpeechToText_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamSpeechToText",
			Handler:       _SpeechToTextService_ClientStreamSpeechToText_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamSpeechToText",
			Handler:       _SpeechToTextService_BidirectionalStreamSpeechToText_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "voice.proto",
}
