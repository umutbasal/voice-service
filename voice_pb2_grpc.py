# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import voice_pb2 as voice__pb2


class TextToSpeechServiceStub(object):
    """Text-to-Speech Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnaryConvertTextToSpeech = channel.unary_unary(
                '/voice.TextToSpeechService/UnaryConvertTextToSpeech',
                request_serializer=voice__pb2.TextToSpeechRequest.SerializeToString,
                response_deserializer=voice__pb2.TextToSpeechResponse.FromString,
                )
        self.ServerStreamTextToSpeech = channel.unary_stream(
                '/voice.TextToSpeechService/ServerStreamTextToSpeech',
                request_serializer=voice__pb2.TextToSpeechRequest.SerializeToString,
                response_deserializer=voice__pb2.AudioChunk.FromString,
                )
        self.ClientStreamTextToSpeech = channel.stream_unary(
                '/voice.TextToSpeechService/ClientStreamTextToSpeech',
                request_serializer=voice__pb2.TextChunk.SerializeToString,
                response_deserializer=voice__pb2.TextToSpeechResponse.FromString,
                )
        self.BidirectionalStreamTextToSpeech = channel.stream_stream(
                '/voice.TextToSpeechService/BidirectionalStreamTextToSpeech',
                request_serializer=voice__pb2.TextChunk.SerializeToString,
                response_deserializer=voice__pb2.AudioChunk.FromString,
                )


class TextToSpeechServiceServicer(object):
    """Text-to-Speech Service
    """

    def UnaryConvertTextToSpeech(self, request, context):
        """Unary: Text in, Audio out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStreamTextToSpeech(self, request, context):
        """Server streaming: Long text in, stream of audio chunks out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStreamTextToSpeech(self, request_iterator, context):
        """Client streaming: Stream of text chunks in, complete audio out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidirectionalStreamTextToSpeech(self, request_iterator, context):
        """Bidirectional streaming: Stream of text chunks in, stream of audio chunks out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextToSpeechServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UnaryConvertTextToSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.UnaryConvertTextToSpeech,
                    request_deserializer=voice__pb2.TextToSpeechRequest.FromString,
                    response_serializer=voice__pb2.TextToSpeechResponse.SerializeToString,
            ),
            'ServerStreamTextToSpeech': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerStreamTextToSpeech,
                    request_deserializer=voice__pb2.TextToSpeechRequest.FromString,
                    response_serializer=voice__pb2.AudioChunk.SerializeToString,
            ),
            'ClientStreamTextToSpeech': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientStreamTextToSpeech,
                    request_deserializer=voice__pb2.TextChunk.FromString,
                    response_serializer=voice__pb2.TextToSpeechResponse.SerializeToString,
            ),
            'BidirectionalStreamTextToSpeech': grpc.stream_stream_rpc_method_handler(
                    servicer.BidirectionalStreamTextToSpeech,
                    request_deserializer=voice__pb2.TextChunk.FromString,
                    response_serializer=voice__pb2.AudioChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'voice.TextToSpeechService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextToSpeechService(object):
    """Text-to-Speech Service
    """

    @staticmethod
    def UnaryConvertTextToSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/voice.TextToSpeechService/UnaryConvertTextToSpeech',
            voice__pb2.TextToSpeechRequest.SerializeToString,
            voice__pb2.TextToSpeechResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStreamTextToSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/voice.TextToSpeechService/ServerStreamTextToSpeech',
            voice__pb2.TextToSpeechRequest.SerializeToString,
            voice__pb2.AudioChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStreamTextToSpeech(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/voice.TextToSpeechService/ClientStreamTextToSpeech',
            voice__pb2.TextChunk.SerializeToString,
            voice__pb2.TextToSpeechResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BidirectionalStreamTextToSpeech(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/voice.TextToSpeechService/BidirectionalStreamTextToSpeech',
            voice__pb2.TextChunk.SerializeToString,
            voice__pb2.AudioChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SpeechToTextServiceStub(object):
    """Speech-to-Text Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnaryConvertSpeechToText = channel.unary_unary(
                '/voice.SpeechToTextService/UnaryConvertSpeechToText',
                request_serializer=voice__pb2.SpeechToTextRequest.SerializeToString,
                response_deserializer=voice__pb2.SpeechToTextResponse.FromString,
                )
        self.ServerStreamSpeechToText = channel.unary_stream(
                '/voice.SpeechToTextService/ServerStreamSpeechToText',
                request_serializer=voice__pb2.SpeechToTextRequest.SerializeToString,
                response_deserializer=voice__pb2.TranscriptionChunk.FromString,
                )
        self.ClientStreamSpeechToText = channel.stream_unary(
                '/voice.SpeechToTextService/ClientStreamSpeechToText',
                request_serializer=voice__pb2.AudioChunk.SerializeToString,
                response_deserializer=voice__pb2.SpeechToTextResponse.FromString,
                )
        self.BidirectionalStreamSpeechToText = channel.stream_stream(
                '/voice.SpeechToTextService/BidirectionalStreamSpeechToText',
                request_serializer=voice__pb2.AudioChunk.SerializeToString,
                response_deserializer=voice__pb2.TranscriptionChunk.FromString,
                )


class SpeechToTextServiceServicer(object):
    """Speech-to-Text Service
    """

    def UnaryConvertSpeechToText(self, request, context):
        """Unary: Audio in, Text out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStreamSpeechToText(self, request, context):
        """Server streaming: Complete audio in, stream of text chunks out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStreamSpeechToText(self, request_iterator, context):
        """Client streaming: Stream of audio chunks in, complete text out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidirectionalStreamSpeechToText(self, request_iterator, context):
        """Bidirectional streaming: Stream of audio chunks in, stream of text chunks out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpeechToTextServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UnaryConvertSpeechToText': grpc.unary_unary_rpc_method_handler(
                    servicer.UnaryConvertSpeechToText,
                    request_deserializer=voice__pb2.SpeechToTextRequest.FromString,
                    response_serializer=voice__pb2.SpeechToTextResponse.SerializeToString,
            ),
            'ServerStreamSpeechToText': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerStreamSpeechToText,
                    request_deserializer=voice__pb2.SpeechToTextRequest.FromString,
                    response_serializer=voice__pb2.TranscriptionChunk.SerializeToString,
            ),
            'ClientStreamSpeechToText': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientStreamSpeechToText,
                    request_deserializer=voice__pb2.AudioChunk.FromString,
                    response_serializer=voice__pb2.SpeechToTextResponse.SerializeToString,
            ),
            'BidirectionalStreamSpeechToText': grpc.stream_stream_rpc_method_handler(
                    servicer.BidirectionalStreamSpeechToText,
                    request_deserializer=voice__pb2.AudioChunk.FromString,
                    response_serializer=voice__pb2.TranscriptionChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'voice.SpeechToTextService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpeechToTextService(object):
    """Speech-to-Text Service
    """

    @staticmethod
    def UnaryConvertSpeechToText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/voice.SpeechToTextService/UnaryConvertSpeechToText',
            voice__pb2.SpeechToTextRequest.SerializeToString,
            voice__pb2.SpeechToTextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStreamSpeechToText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/voice.SpeechToTextService/ServerStreamSpeechToText',
            voice__pb2.SpeechToTextRequest.SerializeToString,
            voice__pb2.TranscriptionChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStreamSpeechToText(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/voice.SpeechToTextService/ClientStreamSpeechToText',
            voice__pb2.AudioChunk.SerializeToString,
            voice__pb2.SpeechToTextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BidirectionalStreamSpeechToText(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/voice.SpeechToTextService/BidirectionalStreamSpeechToText',
            voice__pb2.AudioChunk.SerializeToString,
            voice__pb2.TranscriptionChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
