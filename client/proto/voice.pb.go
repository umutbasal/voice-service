// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.3
// source: proto/voice.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Reusable Types
type AudioChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioData []byte `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"` // Audio data chunk for Text-to-Speech and Speech-to-Text
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_voice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_voice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_proto_voice_proto_rawDescGZIP(), []int{0}
}

func (x *AudioChunk) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

type TextChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // Text chunk for Text-to-Speech
}

func (x *TextChunk) Reset() {
	*x = TextChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_voice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextChunk) ProtoMessage() {}

func (x *TextChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_voice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextChunk.ProtoReflect.Descriptor instead.
func (*TextChunk) Descriptor() ([]byte, []int) {
	return file_proto_voice_proto_rawDescGZIP(), []int{1}
}

func (x *TextChunk) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TranscriptionChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartialTranscription string `protobuf:"bytes,1,opt,name=partial_transcription,json=partialTranscription,proto3" json:"partial_transcription,omitempty"` // Partial transcription chunk for Speech-to-Text
}

func (x *TranscriptionChunk) Reset() {
	*x = TranscriptionChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_voice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionChunk) ProtoMessage() {}

func (x *TranscriptionChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_voice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionChunk.ProtoReflect.Descriptor instead.
func (*TranscriptionChunk) Descriptor() ([]byte, []int) {
	return file_proto_voice_proto_rawDescGZIP(), []int{2}
}

func (x *TranscriptionChunk) GetPartialTranscription() string {
	if x != nil {
		return x.PartialTranscription
	}
	return ""
}

// Text-to-Speech Request/Response
type TextToSpeechRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Voice    string `protobuf:"bytes,3,opt,name=voice,proto3" json:"voice,omitempty"`
}

func (x *TextToSpeechRequest) Reset() {
	*x = TextToSpeechRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_voice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextToSpeechRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextToSpeechRequest) ProtoMessage() {}

func (x *TextToSpeechRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_voice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextToSpeechRequest.ProtoReflect.Descriptor instead.
func (*TextToSpeechRequest) Descriptor() ([]byte, []int) {
	return file_proto_voice_proto_rawDescGZIP(), []int{3}
}

func (x *TextToSpeechRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextToSpeechRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TextToSpeechRequest) GetVoice() string {
	if x != nil {
		return x.Voice
	}
	return ""
}

type TextToSpeechResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioData []byte `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"` // The generated audio in a binary format (e.g., MP3, WAV)
}

func (x *TextToSpeechResponse) Reset() {
	*x = TextToSpeechResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_voice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextToSpeechResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextToSpeechResponse) ProtoMessage() {}

func (x *TextToSpeechResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_voice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextToSpeechResponse.ProtoReflect.Descriptor instead.
func (*TextToSpeechResponse) Descriptor() ([]byte, []int) {
	return file_proto_voice_proto_rawDescGZIP(), []int{4}
}

func (x *TextToSpeechResponse) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

// Speech-to-Text Request/Response
type SpeechToTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioData []byte `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"` // The audio data for transcription
}

func (x *SpeechToTextRequest) Reset() {
	*x = SpeechToTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_voice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechToTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechToTextRequest) ProtoMessage() {}

func (x *SpeechToTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_voice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechToTextRequest.ProtoReflect.Descriptor instead.
func (*SpeechToTextRequest) Descriptor() ([]byte, []int) {
	return file_proto_voice_proto_rawDescGZIP(), []int{5}
}

func (x *SpeechToTextRequest) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

type SpeechToTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranscribedText string `protobuf:"bytes,1,opt,name=transcribed_text,json=transcribedText,proto3" json:"transcribed_text,omitempty"` // The transcribed text from the speech
}

func (x *SpeechToTextResponse) Reset() {
	*x = SpeechToTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_voice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechToTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechToTextResponse) ProtoMessage() {}

func (x *SpeechToTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_voice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechToTextResponse.ProtoReflect.Descriptor instead.
func (*SpeechToTextResponse) Descriptor() ([]byte, []int) {
	return file_proto_voice_proto_rawDescGZIP(), []int{6}
}

func (x *SpeechToTextResponse) GetTranscribedText() string {
	if x != nil {
		return x.TranscribedText
	}
	return ""
}

var File_proto_voice_proto protoreflect.FileDescriptor

var file_proto_voice_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2b, 0x0a, 0x0a, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x33,
	0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x35, 0x0a, 0x14, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a,
	0x14, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x32, 0xc6, 0x02, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12,
	0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x1a,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12,
	0x4c, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1b,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x4a, 0x0a,
	0x1f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x1a, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x28, 0x01, 0x30, 0x01, 0x32, 0xd8, 0x02, 0x0a, 0x13, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01,
	0x12, 0x4d, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x1a, 0x1b, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54,
	0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12,
	0x53, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54,
	0x6f, 0x54, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x19, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x1e, 0x5a, 0x1c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_voice_proto_rawDescOnce sync.Once
	file_proto_voice_proto_rawDescData = file_proto_voice_proto_rawDesc
)

func file_proto_voice_proto_rawDescGZIP() []byte {
	file_proto_voice_proto_rawDescOnce.Do(func() {
		file_proto_voice_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_voice_proto_rawDescData)
	})
	return file_proto_voice_proto_rawDescData
}

var file_proto_voice_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_voice_proto_goTypes = []interface{}{
	(*AudioChunk)(nil),           // 0: voice.AudioChunk
	(*TextChunk)(nil),            // 1: voice.TextChunk
	(*TranscriptionChunk)(nil),   // 2: voice.TranscriptionChunk
	(*TextToSpeechRequest)(nil),  // 3: voice.TextToSpeechRequest
	(*TextToSpeechResponse)(nil), // 4: voice.TextToSpeechResponse
	(*SpeechToTextRequest)(nil),  // 5: voice.SpeechToTextRequest
	(*SpeechToTextResponse)(nil), // 6: voice.SpeechToTextResponse
}
var file_proto_voice_proto_depIdxs = []int32{
	3, // 0: voice.TextToSpeechService.ConvertTextToSpeech:input_type -> voice.TextToSpeechRequest
	3, // 1: voice.TextToSpeechService.StreamTextToSpeech:input_type -> voice.TextToSpeechRequest
	1, // 2: voice.TextToSpeechService.StreamTextToSpeechRequest:input_type -> voice.TextChunk
	1, // 3: voice.TextToSpeechService.StreamTextToSpeechBidirectional:input_type -> voice.TextChunk
	5, // 4: voice.SpeechToTextService.ConvertSpeechToText:input_type -> voice.SpeechToTextRequest
	5, // 5: voice.SpeechToTextService.StreamSpeechToText:input_type -> voice.SpeechToTextRequest
	0, // 6: voice.SpeechToTextService.StreamSpeechToTextRequest:input_type -> voice.AudioChunk
	0, // 7: voice.SpeechToTextService.StreamSpeechToTextBidirectional:input_type -> voice.AudioChunk
	4, // 8: voice.TextToSpeechService.ConvertTextToSpeech:output_type -> voice.TextToSpeechResponse
	0, // 9: voice.TextToSpeechService.StreamTextToSpeech:output_type -> voice.AudioChunk
	4, // 10: voice.TextToSpeechService.StreamTextToSpeechRequest:output_type -> voice.TextToSpeechResponse
	0, // 11: voice.TextToSpeechService.StreamTextToSpeechBidirectional:output_type -> voice.AudioChunk
	6, // 12: voice.SpeechToTextService.ConvertSpeechToText:output_type -> voice.SpeechToTextResponse
	2, // 13: voice.SpeechToTextService.StreamSpeechToText:output_type -> voice.TranscriptionChunk
	6, // 14: voice.SpeechToTextService.StreamSpeechToTextRequest:output_type -> voice.SpeechToTextResponse
	2, // 15: voice.SpeechToTextService.StreamSpeechToTextBidirectional:output_type -> voice.TranscriptionChunk
	8, // [8:16] is the sub-list for method output_type
	0, // [0:8] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_voice_proto_init() }
func file_proto_voice_proto_init() {
	if File_proto_voice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_voice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_voice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_voice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_voice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextToSpeechRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_voice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextToSpeechResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_voice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechToTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_voice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechToTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_voice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_voice_proto_goTypes,
		DependencyIndexes: file_proto_voice_proto_depIdxs,
		MessageInfos:      file_proto_voice_proto_msgTypes,
	}.Build()
	File_proto_voice_proto = out.File
	file_proto_voice_proto_rawDesc = nil
	file_proto_voice_proto_goTypes = nil
	file_proto_voice_proto_depIdxs = nil
}
